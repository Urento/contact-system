// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator giraphql {
  provider = "prisma-giraphql-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String         @unique
  username     String
  password     String
  posts        Post[]
  comments     Comment[]
  stars        Star[]
  Organisation Organisation[]
}

model Post {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  title     String
  body      String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  comments  Comment[]
  stars     Star[]
}

model Star {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String
  postId    String

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  userId    String
}

model Organisation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String   @unique
  name      String
  forms     Form[]
}

model Form {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId String       @unique
}

model Contact {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  email          String
  name           String
  lastname       String
  phoneNumber    String
  issue          String
  organisationId Int
  seen           Boolean  @default(false)
  formId         Int
}

// Should be stored in redis but im too lazy to set it up
model Token {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique
  expiredAt DateTime
  email     String
}
